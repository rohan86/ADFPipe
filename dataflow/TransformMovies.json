{
	"name": "TransformMovies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesData",
						"type": "DatasetReference"
					},
					"name": "MoviesData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "Output"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "FilterYears"
				},
				{
					"name": "AggComedyRating"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MoviesData",
				"MoviesData filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FilterYears",
				"FilterYears aggregate(AverageComedyRating = avg(toInteger(Rating))) ~> AggComedyRating",
				"AggComedyRating sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Output",
				"FilterYears sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Movie as string,",
				"          Title as string,",
				"          Genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottonTomato as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Movie = movie,",
				"          Title = title,",
				"          Genres = genres,",
				"          year,",
				"          Rating,",
				"          RottonTomato = {Rotton Tomato}",
				"     )) ~> sink1"
			]
		}
	}
}